import os
import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import aiohttp
from telegram import Bot
from telegram.error import TelegramError
import pytz

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —Ç–≤–æ–∏—Ç–µ —Ç–æ–∫–µ–Ω–∏
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8354673661:AAGaSRxyHa2WGFkyMjoTWg5qrC2Lxcf7s6M')
TELEGRAM_CHANNEL_ID = os.getenv('TELEGRAM_CHANNEL_ID', '-1003114970901')
API_FOOTBALL_KEY = os.getenv('API_FOOTBALL_KEY', '2589b526b382f3528eb485c95eac5080')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞ –º–∞—Ä—Ç–∏–Ω–≥–µ–π–ª
INITIAL_BET = 1.0  # 1 –µ–≤—Ä–æ
TARGET_ODD_MIN = 2.0
TARGET_ODD_MAX = 2.5
MAX_BETS_PER_DAY = 5
BET_TIMES = ['08:00', '11:00', '14:00', '17:00', '20:00']

# –õ–æ–≥–≤–∞–Ω–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class FootballAPI:
    BASE_URL = "https://v3.football.api-sports.io"
    
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.headers = {
            'x-apisports-key': api_key
        }
    
    async def get_today_fixtures(self) -> List[Dict]:
        """–í–∑–∏–º–∞ –º–∞—á–æ–≤–µ—Ç–µ –∑–∞ –¥–Ω–µ—Å"""
        today = datetime.now().strftime('%Y-%m-%d')
        url = f"{self.BASE_URL}/fixtures"
        params = {
            'date': today,
            'status': 'NS'  # Not Started
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=self.headers, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    return data.get('response', [])
                logger.error(f"API –≥—Ä–µ—à–∫–∞: {response.status}")
                return []
    
    async def get_predictions(self, fixture_id: int) -> Optional[Dict]:
        """–í–∑–∏–º–∞ –ø—Ä–µ–¥–≤–∏–∂–¥–∞–Ω–∏—è –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω –º–∞—á"""
        url = f"{self.BASE_URL}/predictions"
        params = {'fixture': fixture_id}
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=self.headers, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    results = data.get('response', [])
                    return results[0] if results else None
                return None
    
    async def get_odds(self, fixture_id: int) -> Optional[Dict]:
        """–í–∑–∏–º–∞ –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç–∏ –∑–∞ –º–∞—á"""
        url = f"{self.BASE_URL}/odds"
        params = {
            'fixture': fixture_id,
            'bookmaker': 8  # Bet365 ID
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=self.headers, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    results = data.get('response', [])
                    return results[0] if results else None
                return None

class BettingStrategy:
    def __init__(self):
        self.current_bet = INITIAL_BET
        self.bets_today = []
        self.bet_results = []  # –†–µ–∑—É–ª—Ç–∞—Ç–∏ –æ—Ç –ø—Ä–µ–¥–∏—à–Ω–∏ –∑–∞–ª–æ–∑–∏
    
    def calculate_next_bet(self, won: bool) -> float:
        """–ò–∑—á–∏—Å–ª—è–≤–∞ —Å–ª–µ–¥–≤–∞—â –∑–∞–ª–æ–≥ —Å–ø–æ—Ä–µ–¥ –º–∞—Ä—Ç–∏–Ω–≥–µ–π–ª"""
        if won:
            self.current_bet = INITIAL_BET
        else:
            # –ú–∞—Ä—Ç–∏–Ω–≥–µ–π–ª: —É–¥–≤–æ—è–≤–∞–º–µ –∑–∞–ª–æ–≥–∞ —Å–ª–µ–¥ –∑–∞–≥—É–±–∞
            self.current_bet = round(self.current_bet * 2.2, 2)
        return self.current_bet
    
    def add_bet_result(self, won: bool):
        """–î–æ–±–∞–≤—è —Ä–µ–∑—É–ª—Ç–∞—Ç –æ—Ç –∑–∞–ª–æ–≥"""
        self.bet_results.append(won)
        self.calculate_next_bet(won)
    
    def reset_daily(self):
        """–ù—É–ª–∏—Ä–∞ –¥–Ω–µ–≤–Ω–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.current_bet = INITIAL_BET
        self.bets_today = []
        self.bet_results = []

class BetSelector:
    def __init__(self, api: FootballAPI):
        self.api = api
    
    async def find_best_combination(self, excluded_fixture_ids: List[int] = None) -> Optional[Dict]:
        """–ù–∞–º–∏—Ä–∞ –Ω–∞–π-–¥–æ–±—Ä–∞—Ç–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Å –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–µ–∂–¥—É 2.0-2.5 –∏ –Ω–∞–π-–≤–∏—Å–æ–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç"""
        if excluded_fixture_ids is None:
            excluded_fixture_ids = []
        
        logger.info("–ó–∞–ø–æ—á–≤–∞ —Ç—ä—Ä—Å–µ–Ω–µ –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏ –º–∞—á–æ–≤–µ...")
        fixtures = await self.api.get_today_fixtures()
        logger.info(f"–ù–∞–º–µ—Ä–µ–Ω–∏ {len(fixtures)} –º–∞—á–∞ –∑–∞ –¥–Ω–µ—Å")
        
        # –§–∏–ª—Ç—Ä–∏—Ä–∞–º–µ –º–∞—á–æ–≤–µ, –∫–æ–∏—Ç–æ —Å–∞ —Å–ª–µ–¥ 2 —á–∞—Å–∞ –æ—Ç —Å–µ–≥–∞
        now = datetime.now(pytz.UTC)
        future_fixtures = []
        
        for fixture in fixtures:
            try:
                fixture_time = datetime.fromisoformat(fixture['fixture']['date'].replace('Z', '+00:00'))
                if fixture_time > now + timedelta(hours=2) and fixture['fixture']['id'] not in excluded_fixture_ids:
                    future_fixtures.append(fixture)
            except Exception as e:
                logger.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –≤—Ä–µ–º–µ: {e}")
                continue
        
        logger.info(f"–§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–∏ {len(future_fixtures)} –ø–æ–¥—Ö–æ–¥—è—â–∏ –º–∞—á–∞")
        
        if not future_fixtures:
            logger.warning("–ù—è–º–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏ –º–∞—á–æ–≤–µ")
            return None
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–º–µ –≤—Å–∏—á–∫–∏ –º–∞—á–æ–≤–µ –∏ —Å—ä–±–∏—Ä–∞–º–µ –¥–∞–Ω–Ω–∏
        analyzed_bets = []
        
        for fixture in future_fixtures[:30]:  # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–æ 30 –º–∞—á–∞
            try:
                fixture_id = fixture['fixture']['id']
                logger.info(f"–ê–Ω–∞–ª–∏–∑ –Ω–∞ –º–∞—á ID: {fixture_id}")
                
                prediction = await self.api.get_predictions(fixture_id)
                await asyncio.sleep(1)  # Rate limiting
                
                odds_data = await self.api.get_odds(fixture_id)
                await asyncio.sleep(1)  # Rate limiting
                
                if not prediction or not odds_data:
                    logger.info(f"–ù—è–º–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –º–∞—á {fixture_id}")
                    continue
                
                # –ò–∑–≤–ª–∏—á–∞–º–µ –≤—Å–∏—á–∫–∏ –≤—ä–∑–º–æ–∂–Ω–∏ –∑–∞–ª–æ–∑–∏ —Å –≤–∏—Å–æ–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç
                bet_options = self._extract_all_bet_options(prediction, odds_data, fixture)
                analyzed_bets.extend(bet_options)
                
            except Exception as e:
                logger.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑ –Ω–∞ –º–∞—á {fixture['fixture']['id']}: {e}")
                continue
        
        logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ {len(analyzed_bets)} –≤—ä–∑–º–æ–∂–Ω–∏ –∑–∞–ª–æ–≥–∞")
        
        if not analyzed_bets:
            logger.warning("–ù—è–º–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏ –∑–∞–ª–æ–∑–∏")
            return None
        
        # –¢—ä—Ä—Å–∏–º –Ω–∞–π-–¥–æ–±—Ä–∞—Ç–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è
        best_combination = self._find_optimal_combination(analyzed_bets)
        
        if best_combination:
            logger.info(f"–ù–∞–º–µ—Ä–µ–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Å –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç {best_combination['total_odd']:.2f} –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç {best_combination['avg_confidence']:.1f}%")
        
        return best_combination
    
    def _extract_all_bet_options(self, prediction: Dict, odds_data: Dict, fixture: Dict) -> List[Dict]:
        """–ò–∑–≤–ª–∏—á–∞ –≤—Å–∏—á–∫–∏ –≤—ä–∑–º–æ–∂–Ω–∏ –∑–∞–ª–æ–∑–∏ —Å –≤–∏—Å–æ–∫–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∏ –Ω–∞ —É—Å–ø–µ—Ö"""
        options = []
        
        try:
            predictions = prediction.get('predictions', {})
            win_percent = predictions.get('percent', {})
            
            # –í–∑–µ–º–∞–º–µ –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç–∏—Ç–µ
            bookmaker = odds_data.get('bookmakers', [{}])[0]
            bets = bookmaker.get('bets', [])
            
            # –ù–∞–º–∏—Ä–∞–º–µ Match Winner –∑–∞–ª–æ–∑–∏—Ç–µ
            match_winner = None
            for bet in bets:
                if bet['name'] == 'Match Winner':
                    match_winner = bet
                    break
            
            if not match_winner:
                return options
            
            values = match_winner.get('values', [])
            if len(values) < 3:
                return options
            
            # Home Win
            home_percent = float(win_percent.get('home', '0').rstrip('%'))
            home_odd = float(values[0]['odd'])
            if home_percent > 40:  # –ú–∏–Ω–∏–º—É–º 40% —à–∞–Ω—Å
                options.append({
                    'type': f"üè† {fixture['teams']['home']['name']} –ø–µ—á–µ–ª–∏",
                    'odd': home_odd,
                    'confidence': home_percent,
                    'fixture': fixture,
                    'fixture_id': fixture['fixture']['id']
                })
            
            # Draw
            draw_percent = float(win_percent.get('draw', '0').rstrip('%'))
            draw_odd = float(values[1]['odd'])
            if draw_percent > 25:  # –ú–∏–Ω–∏–º—É–º 25% —à–∞–Ω—Å –∑–∞ —Ä–∞–≤–µ–Ω
                options.append({
                    'type': f"ü§ù –†–∞–≤–µ–Ω",
                    'odd': draw_odd,
                    'confidence': draw_percent,
                    'fixture': fixture,
                    'fixture_id': fixture['fixture']['id']
                })
            
            # Away Win
            away_percent = float(win_percent.get('away', '0').rstrip('%'))
            away_odd = float(values[2]['odd'])
            if away_percent > 40:  # –ú–∏–Ω–∏–º—É–º 40% —à–∞–Ω—Å
                options.append({
                    'type': f"‚úàÔ∏è {fixture['teams']['away']['name']} –ø–µ—á–µ–ª–∏",
                    'odd': away_odd,
                    'confidence': away_percent,
                    'fixture': fixture,
                    'fixture_id': fixture['fixture']['id']
                })
            
        except Exception as e:
            logger.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –æ–ø—Ü–∏–∏: {e}")
        
        return options
    
    def _find_optimal_combination(self, bets: List[Dict]) -> Optional[Dict]:
        """–ù–∞–º–∏—Ä–∞ –æ–ø—Ç–∏–º–∞–ª–Ω–∞—Ç–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Å –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç 2.0-2.5 –∏ –Ω–∞–π-–≤–∏—Å–æ–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç"""
        if not bets:
            return None
        
        # –°–æ—Ä—Ç–∏—Ä–∞–º–µ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç
        bets.sort(key=lambda x: x['confidence'], reverse=True)
        
        best_combo = None
        best_score = 0  # –ö–æ–º–±–∏–Ω–∏—Ä–∞–Ω–∞ –æ—Ü–µ–Ω–∫–∞: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç * –±–ª–∏–∑–æ—Å—Ç –¥–æ —Ü–µ–ª
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ 1 –º–∞—á
        for bet in bets:
            if TARGET_ODD_MIN <= bet['odd'] <= TARGET_ODD_MAX:
                # –û—Ü–µ–Ω–∫–∞: –ø–æ-–≤–∏—Å–æ–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç = –ø–æ-–¥–æ–±—Ä–µ
                score = bet['confidence']
                if score > best_score:
                    best_score = score
                    best_combo = {
                        'bets': [bet],
                        'total_odd': round(bet['odd'], 2),
                        'avg_confidence': bet['confidence']
                    }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ 2 –º–∞—á–∞
        for i in range(min(10, len(bets))):
            for j in range(i+1, min(10, len(bets))):
                # –ù–µ –∫–æ–º–±–∏–Ω–∏—Ä–∞–º–µ –º–∞—á–æ–≤–µ –æ—Ç —Å—ä—â–∏—è fixture
                if bets[i]['fixture_id'] == bets[j]['fixture_id']:
                    continue
                
                combined_odd = bets[i]['odd'] * bets[j]['odd']
                if TARGET_ODD_MIN <= combined_odd <= TARGET_ODD_MAX:
                    avg_conf = (bets[i]['confidence'] + bets[j]['confidence']) / 2
                    # –ë–æ–Ω—É—Å –∑–∞ –ø–æ-–±–ª–∏–∑—ä–∫ –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ 2.2 (—Å—Ä–µ–¥–µ–Ω)
                    odd_bonus = 1 - abs(combined_odd - 2.2) / 0.5
                    score = avg_conf * odd_bonus
                    
                    if score > best_score:
                        best_score = score
                        best_combo = {
                            'bets': [bets[i], bets[j]],
                            'total_odd': round(combined_odd, 2),
                            'avg_confidence': avg_conf
                        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ 3 –º–∞—á–∞
        for i in range(min(8, len(bets))):
            for j in range(i+1, min(8, len(bets))):
                for k in range(j+1, min(8, len(bets))):
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ —É–Ω–∏–∫–∞–ª–Ω–∏ fixture_id
                    ids = {bets[i]['fixture_id'], bets[j]['fixture_id'], bets[k]['fixture_id']}
                    if len(ids) < 3:
                        continue
                    
                    combined_odd = bets[i]['odd'] * bets[j]['odd'] * bets[k]['odd']
                    if TARGET_ODD_MIN <= combined_odd <= TARGET_ODD_MAX:
                        avg_conf = (bets[i]['confidence'] + bets[j]['confidence'] + bets[k]['confidence']) / 3
                        odd_bonus = 1 - abs(combined_odd - 2.2) / 0.5
                        score = avg_conf * odd_bonus
                        
                        if score > best_score:
                            best_score = score
                            best_combo = {
                                'bets': [bets[i], bets[j], bets[k]],
                                'total_odd': round(combined_odd, 2),
                                'avg_confidence': avg_conf
                            }
        
        return best_combo

class TelegramNotifier:
    def __init__(self, token: str, channel_id: str):
        self.bot = Bot(token=token)
        self.channel_id = channel_id
    
    async def send_bet_notification(self, combination: Dict, bet_amount: float, bet_number: int):
        """–ò–∑–ø—Ä–∞—â–∞ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞ –Ω–æ–≤ –∑–∞–ª–æ–≥"""
        message = f"üéØ <b>–ó–ê–õ–û–ì #{bet_number} –ó–ê –î–ù–ï–°</b>\n\n"
        message += f"üí∞ <b>–°—É–º–∞:</b> {bet_amount:.2f} EUR\n"
        message += f"üìä <b>–û–±—â –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç:</b> {combination['total_odd']:.2f}\n"
        message += f"‚úÖ <b>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç –∑–∞ —É—Å–ø–µ—Ö:</b> {combination['avg_confidence']:.1f}%\n"
        message += f"üíµ <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª–Ω–∞ –ø–µ—á–∞–ª–±–∞:</b> {bet_amount * combination['total_odd']:.2f} EUR\n\n"
        
        message += "<b>‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê</b>\n"
        message += "<b>–ö–û–ú–ë–ò–ù–ê–¶–ò–Ø:</b>\n\n"
        
        for idx, bet in enumerate(combination['bets'], 1):
            fixture = bet['fixture']
            home = fixture['teams']['home']['name']
            away = fixture['teams']['away']['name']
            league = fixture['league']['name']
            
            try:
                time = datetime.fromisoformat(fixture['fixture']['date'].replace('Z', '+00:00'))
                time_bg = time.astimezone(pytz.timezone('Europe/Sofia'))
                time_str = time_bg.strftime('%H:%M')
            except:
                time_str = "TBA"
            
            message += f"<b>{idx}. {home} vs {away}</b>\n"
            message += f"   üèÜ {league}\n"
            message += f"   üïê –ß–∞—Å: {time_str}\n"
            message += f"   üé≤ –ó–∞–ª–æ–≥: {bet['type']}\n"
            message += f"   üìà –ö–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç: {bet['odd']:.2f}\n"
            message += f"   ‚úÖ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç: {bet['confidence']:.1f}%\n\n"
        
        message += "<b>‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê</b>\n"
        message += "üîî –°–ª–µ–¥–µ—Ç–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ –∏ —á–∞–∫–∞–π—Ç–µ —Å–ª–µ–¥–≤–∞—â–∏—è –∑–∞–ª–æ–≥!\n"
        message += "üí™ –£—Å–ø–µ—Ö!"
        
        try:
            await self.bot.send_message(
                chat_id=self.channel_id,
                text=message,
                parse_mode='HTML'
            )
            logger.info(f"‚úÖ –ò–∑–ø—Ä–∞—Ç–µ–Ω–∞ –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞ –∑–∞–ª–æ–≥ #{bet_number}")
        except TelegramError as e:
            logger.error(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—Ä–∞—â–∞–Ω–µ: {e}")
    
    async def send_daily_start(self):
        """–ò–∑–ø—Ä–∞—â–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ –∑–∞ –Ω–∞—á–∞–ª–æ –Ω–∞ –¥–µ–Ω—è"""
        message = "üåÖ <b>–î–û–ë–†–û –£–¢–†–û!</b>\n\n"
        message += "–ó–∞–ø–æ—á–≤–∞–º–µ –Ω–æ–≤ –¥–µ–Ω —Å –Ω–∞—à–∞—Ç–∞ –º–∞—Ä—Ç–∏–Ω–≥–µ–π–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏—è!\n\n"
        message += "üìÖ –ü–ª–∞–Ω–∏—Ä–∞–Ω–∏ –∑–∞–ª–æ–∑–∏: 5\n"
        message += "üí∞ –ù–∞—á–∞–ª–Ω–∞ —Å—É–º–∞: 1.00 EUR\n"
        message += "üìä –¶–µ–ª–µ–≤–∏ –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç: 2.0 - 2.5\n\n"
        message += "üî• –ù–µ–∫–∞ —Å–ø–µ—á–µ–ª–∏–º!"
        
        try:
            await self.bot.send_message(
                chat_id=self.channel_id,
                text=message,
                parse_mode='HTML'
            )
        except TelegramError as e:
            logger.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—Ä–∞—â–∞–Ω–µ: {e}")

async def main_loop():
    """–û—Å–Ω–æ–≤–µ–Ω —Ü–∏–∫—ä–ª –Ω–∞ –±–æ—Ç–∞"""
    api = FootballAPI(API_FOOTBALL_KEY)
    selector = BetSelector(api)
    notifier = TelegramNotifier(TELEGRAM_BOT_TOKEN, TELEGRAM_CHANNEL_ID)
    strategy = BettingStrategy()
    
    logger.info("üöÄ –ë–æ—Ç—ä—Ç —Å—Ç–∞—Ä—Ç–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ!")
    
    used_fixture_ids = []
    last_check_date = None
    daily_start_sent = False
    processed_times = set()
    
    while True:
        try:
            now = datetime.now(pytz.timezone('Europe/Sofia'))
            current_date = now.date()
            current_time = now.strftime('%H:%M')
            
            # –ù—É–ª–∏—Ä–∞–º–µ –ø—Ä–∏ –Ω–æ–≤ –¥–µ–Ω
            if last_check_date != current_date:
                strategy.reset_daily()
                used_fixture_ids = []
                last_check_date = current_date
                daily_start_sent = False
                processed_times = set()
                logger.info(f"üìÖ –ù–æ–≤ –¥–µ–Ω: {current_date}")
            
            # –ò–∑–ø—Ä–∞—â–∞–º–µ –Ω–∞—á–∞–ª–Ω–æ —Å—ä–æ–±—â–µ–Ω–∏–µ
            if not daily_start_sent and current_time >= "07:00":
                await notifier.send_daily_start()
                daily_start_sent = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –µ –≤—Ä–µ–º–µ –∑–∞ –∑–∞–ª–æ–≥
            if current_time in BET_TIMES and current_time not in processed_times:
                if len(strategy.bets_today) >= MAX_BETS_PER_DAY:
                    logger.info(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω–∞—Ç –ª–∏–º–∏—Ç –æ—Ç {MAX_BETS_PER_DAY} –∑–∞–ª–æ–≥–∞ –∑–∞ –¥–Ω–µ—Å")
                    processed_times.add(current_time)
                else:
                    logger.info(f"üîç –¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ –∑–∞–ª–æ–≥ –≤ {current_time}...")
                    
                    combination = await selector.find_best_combination(used_fixture_ids)
                    
                    if combination:
                        bet_number = len(strategy.bets_today) + 1
                        bet_amount = strategy.current_bet
                        
                        await notifier.send_bet_notification(combination, bet_amount, bet_number)
                        
                        # –ó–∞–ø–∞–∑–≤–∞–º–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –∑–∞–ª–æ–≥–∞
                        strategy.bets_today.append({
                            'combination': combination,
                            'amount': bet_amount,
                            'time': now
                        })
                        
                        # –î–æ–±–∞–≤—è–º–µ fixture ID-—Ç–∞ –∫—ä–º –∏–∑–ø–æ–ª–∑–≤–∞–Ω–∏—Ç–µ
                        for bet in combination['bets']:
                            used_fixture_ids.append(bet['fixture_id'])
                        
                        logger.info(f"‚úÖ –ó–∞–ª–æ–≥ #{bet_number} –ø—É–±–ª–∏–∫—É–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
                        processed_times.add(current_time)
                    else:
                        logger.warning("‚ö†Ô∏è –ù–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –≤ —Ç–æ–∑–∏ –º–æ–º–µ–Ω—Ç")
                        # –ù–µ –¥–æ–±–∞–≤—è–º–µ –≤ processed_times, –∑–∞ –¥–∞ –æ–ø–∏—Ç–∞–º–µ –æ—Ç–Ω–æ–≤–æ –ø–æ-–∫—ä—Å–Ω–æ
            
            # –ò–∑—á–∞–∫–≤–∞–º–µ 30 —Å–µ–∫—É–Ω–¥–∏
            await asyncio.sleep(30)
            
        except Exception as e:
            logger.error(f"‚ùå –ì—Ä–µ—à–∫–∞ –≤ –≥–ª–∞–≤–Ω–∏—è —Ü–∏–∫—ä–ª: {e}")
            await asyncio.sleep(60)

if __name__ == '__main__':
    asyncio.run(main_loop())
